import React, { useState } from 'react';
import { Upload, FileText, AlertTriangle, CheckCircle, Download, Sparkles, Scale, Shield } from 'lucide-react';

const ContractIQ = () => {
  const [activeTab, setActiveTab] = useState('analyze');
  const [uploadedFile, setUploadedFile] = useState(null);
  const [analysis, setAnalysis] = useState(null);
  const [generating, setGenerating] = useState(false);
  const [generatedContract, setGeneratedContract] = useState(null);
  const [contractType, setContractType] = useState('nda');
  const [prompt, setPrompt] = useState('');
  const [showComparison, setShowComparison] = useState(false);
  const [contract1, setContract1] = useState(null);
  const [contract2, setContract2] = useState(null);
  const [comparisonResult, setComparisonResult] = useState(null);

  // Simulate file upload
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      setUploadedFile(file);
      // Simulate analysis after upload
      setTimeout(() => {
        setAnalysis({
          fileName: file.name,
          riskScore: 6.5,
          summary: "This Service Agreement establishes a relationship between a client and service provider for design services. The contract includes standard payment terms, intellectual property clauses, and termination conditions.",
          keyTerms: [
            { term: "Payment Terms", value: "Net 30 days", risk: "low" },
            { term: "IP Ownership", value: "Transfers to client upon full payment", risk: "medium" },
            { term: "Liability Cap", value: "$50,000 maximum", risk: "medium" },
            { term: "Term Length", value: "6 months with auto-renewal", risk: "high" },
            { term: "Termination Notice", value: "30 days written notice", risk: "low" }
          ],
          redFlags: [
            { 
              issue: "Auto-Renewal Clause", 
              severity: "high",
              explanation: "Contract automatically renews unless terminated 60 days in advance. This could lock you into unwanted extensions.",
              suggestion: "Request manual renewal or shorter notice period (30 days)"
            },
            { 
              issue: "Broad Indemnification", 
              severity: "medium",
              explanation: "Provider indemnifies client for all claims, including those from client's own negligence.",
              suggestion: "Limit indemnification to provider's direct actions only"
            },
            { 
              issue: "Unclear Deliverable Specifications", 
              severity: "medium",
              explanation: "Deliverables are vaguely defined as 'design services as requested'.",
              suggestion: "Add specific deliverables list and acceptance criteria"
            }
          ],
          complianceChecks: [
            { item: "GDPR Compliance", status: "pass" },
            { item: "Force Majeure Clause", status: "pass" },
            { item: "Dispute Resolution", status: "warning" },
            { item: "Confidentiality Terms", status: "pass" }
          ]
        });
      }, 1500);
    }
  };

  // Download functions
  const downloadAsDocx = (content, filename) => {
    // Create HTML content with proper formatting
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <style>
          body { font-family: 'Times New Roman', serif; line-height: 1.6; padding: 40px; }
          pre { white-space: pre-wrap; font-family: 'Times New Roman', serif; }
        </style>
      </head>
      <body>
        <pre>${content}</pre>
      </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'application/msword' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${filename}.doc`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const downloadAsPdf = (content, filename) => {
    // Create a printable HTML page
    const printWindow = window.open('', '', 'width=800,height=600');
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>${filename}</title>
        <style>
          body {
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
            padding: 40px;
            max-width: 800px;
            margin: 0 auto;
          }
          pre {
            white-space: pre-wrap;
            font-family: 'Times New Roman', serif;
            font-size: 12pt;
          }
          @media print {
            body { padding: 20px; }
          }
        </style>
      </head>
      <body>
        <pre>${content}</pre>
        <script>
          window.onload = function() {
            window.print();
            setTimeout(function() { window.close(); }, 100);
          }
        </script>
      </body>
      </html>
    `);
    printWindow.document.close();
  };

  const downloadAnalysisReport = () => {
    if (!analysis) return;
    
    const reportContent = `CONTRACT ANALYSIS REPORT
Generated by ContractIQ on ${new Date().toLocaleDateString()}

CONTRACT: ${analysis.fileName}
RISK SCORE: ${analysis.riskScore}/10

═══════════════════════════════════════════════════════════

SUMMARY:
${analysis.summary}

═══════════════════════════════════════════════════════════

KEY TERMS IDENTIFIED:

${analysis.keyTerms.map((term, idx) => `
${idx + 1}. ${term.term}
   Value: ${term.value}
   Risk Level: ${term.risk.toUpperCase()}
`).join('')}

═══════════════════════════════════════════════════════════

RED FLAGS DETECTED:

${analysis.redFlags.map((flag, idx) => `
${idx + 1}. ${flag.issue} [${flag.severity.toUpperCase()}]
   
   Explanation: ${flag.explanation}
   
   Recommendation: ${flag.suggestion}
`).join('\n')}

═══════════════════════════════════════════════════════════

COMPLIANCE CHECKS:

${analysis.complianceChecks.map(check => `
• ${check.item}: ${check.status.toUpperCase()}
`).join('')}

═══════════════════════════════════════════════════════════

DISCLAIMER:
This analysis is provided by AI and is for informational purposes only.
It does not constitute legal advice. Please consult with a qualified
attorney before making any legal decisions.

Generated by ContractIQ - AI Contract Analyzer
© 2025 ContractIQ. All rights reserved.`;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `ContractIQ_Analysis_Report_${new Date().getTime()}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  // Simulate contract generation
  const handleGenerateContract = () => {
    setGenerating(true);
    setTimeout(() => {
      const contracts = {
        nda: {
          title: "Non-Disclosure Agreement",
          content: `NON-DISCLOSURE AGREEMENT

This Non-Disclosure Agreement (the "Agreement") is entered into as of ${new Date().toLocaleDateString()} by and between:

DISCLOSING PARTY: [Your Company Name]
RECEIVING PARTY: [Recipient Name]

1. DEFINITION OF CONFIDENTIAL INFORMATION
"Confidential Information" means any data or information that is proprietary to the Disclosing Party and not generally known to the public, including but not limited to:
   • Business strategies and plans
   • Financial information
   • Customer lists and data
   • Technical processes and specifications
   • Product development plans

2. OBLIGATIONS OF RECEIVING PARTY
The Receiving Party agrees to:
   a) Hold all Confidential Information in strict confidence
   b) Not disclose Confidential Information to any third parties
   c) Use Confidential Information solely for the purpose of ${prompt || 'evaluating business relationship'}
   d) Protect Confidential Information with the same degree of care used for own confidential information

3. TERM
This Agreement shall remain in effect for a period of 2 years from the Effective Date.

4. RETURN OF MATERIALS
Upon request, Receiving Party shall promptly return all materials containing Confidential Information.

5. NO LICENSE
Nothing in this Agreement grants any license or rights in Confidential Information except as expressly stated.

6. GOVERNING LAW
This Agreement shall be governed by the laws of [Jurisdiction].

DISCLOSING PARTY                    RECEIVING PARTY

_____________________              _____________________
Signature                          Signature

_____________________              _____________________
Name                               Name

_____________________              _____________________
Date                               Date`
        },
        service: {
          title: "Service Agreement",
          content: `SERVICE AGREEMENT

This Service Agreement (the "Agreement") is made as of ${new Date().toLocaleDateString()} between:

SERVICE PROVIDER: [Provider Name]
CLIENT: [Client Name]

1. SERVICES
The Service Provider agrees to provide the following services: ${prompt || 'professional services as mutually agreed upon'}

2. COMPENSATION
Client agrees to pay Service Provider:
   • Rate: [Amount] per [hour/project]
   • Payment Terms: Net 30 days from invoice date
   • Late Payment: 1.5% monthly interest on overdue amounts

3. INTELLECTUAL PROPERTY
   a) All work product created under this Agreement shall be owned by Client upon full payment
   b) Provider retains right to use work in portfolio with Client approval
   c) Provider grants Client perpetual, worldwide license to use deliverables

4. TERM AND TERMINATION
   • Initial Term: 6 months from Effective Date
   • Renewal: Manual renewal only
   • Termination: Either party may terminate with 30 days written notice
   • Effect of Termination: Client pays for work completed through termination date

5. WARRANTIES AND REPRESENTATIONS
Provider warrants that:
   • Services will be performed in professional manner
   • Work will be original and not infringe third-party rights
   • Provider has authority to enter this Agreement

6. LIMITATION OF LIABILITY
Provider's total liability shall not exceed fees paid in preceding 6 months.

7. CONFIDENTIALITY
Both parties agree to maintain confidentiality of proprietary information.

8. INDEPENDENT CONTRACTOR
Provider is an independent contractor, not an employee.

9. GOVERNING LAW
This Agreement shall be governed by [Jurisdiction] law.

SERVICE PROVIDER                    CLIENT

_____________________              _____________________
Signature                          Signature

_____________________              _____________________
Date                               Date`
        },
        employment: {
          title: "Employment Agreement",
          content: `EMPLOYMENT AGREEMENT

This Employment Agreement is entered into as of ${new Date().toLocaleDateString()} between:

EMPLOYER: [Company Name]
EMPLOYEE: [Employee Name]

1. POSITION AND DUTIES
   • Position: ${prompt || '[Job Title]'}
   • Reporting To: [Manager Title]
   • Location: [Work Location]
   • Start Date: [Date]

2. COMPENSATION AND BENEFITS
   • Base Salary: $[Amount] per year, paid [bi-weekly/monthly]
   • Benefits: Health insurance, 401(k), PTO as per company policy
   • Bonus: Eligible for annual performance bonus

3. EMPLOYMENT TERM
   • Type: At-will employment
   • Either party may terminate with 2 weeks notice
   • Company may terminate immediately for Cause

4. WORKING HOURS
   • Standard Hours: [40] hours per week
   • Overtime: Exempt/Non-exempt per FLSA

5. CONFIDENTIALITY AND IP
   a) Employee agrees to maintain confidentiality of company information
   b) All work product and inventions created during employment belong to Employer
   c) Non-compete: [If applicable, specify terms]

6. CODE OF CONDUCT
Employee agrees to:
   • Comply with all company policies
   • Act professionally and ethically
   • Avoid conflicts of interest

7. TERMINATION
Upon termination:
   • Return all company property
   • Final paycheck includes accrued PTO
   • Confidentiality obligations continue

8. DISPUTE RESOLUTION
Any disputes shall be resolved through [arbitration/mediation].

9. ENTIRE AGREEMENT
This Agreement constitutes the entire agreement between parties.

EMPLOYER                           EMPLOYEE

_____________________              _____________________
Signature                          Signature

_____________________              _____________________
Date                               Date`
        }
      };

      setGeneratedContract(contracts[contractType]);
      setGenerating(false);
    }, 2000);
  };

  const getRiskColor = (score) => {
    if (score < 4) return 'text-green-600';
    if (score < 7) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getRiskBg = (score) => {
    if (score < 4) return 'bg-green-100';
    if (score < 7) return 'bg-yellow-100';
    return 'bg-red-100';
  };

  const getSeverityColor = (severity) => {
    const colors = {
      low: 'bg-green-100 text-green-800 border-green-200',
      medium: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      high: 'bg-red-100 text-red-800 border-red-200'
    };
    return colors[severity];
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 shadow-sm">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="bg-gradient-to-br from-indigo-600 to-purple-600 p-2 rounded-xl">
                <FileText className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                  ContractIQ
                </h1>
                <p className="text-xs text-gray-500">AI Contract Analyzer & Generator</p>
              </div>
            </div>
            <div className="flex items-center gap-4">
              <div className="text-right">
                <div className="text-sm font-semibold text-gray-900">Free Plan</div>
                <div className="text-xs text-gray-500">2/3 contracts this month</div>
              </div>
              <button className="px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg font-medium text-sm hover:shadow-lg transition-all">
                Upgrade to Pro
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Tab Navigation */}
        <div className="flex gap-4 mb-8">
          <button
            onClick={() => setActiveTab('analyze')}
            className={`flex items-center gap-2 px-6 py-3 rounded-xl font-medium transition-all ${
              activeTab === 'analyze'
                ? 'bg-white text-indigo-600 shadow-md'
                : 'text-gray-600 hover:bg-white/50'
            }`}
          >
            <Scale className="w-5 h-5" />
            Analyze Contract
          </button>
          <button
            onClick={() => setActiveTab('generate')}
            className={`flex items-center gap-2 px-6 py-3 rounded-xl font-medium transition-all ${
              activeTab === 'generate'
                ? 'bg-white text-indigo-600 shadow-md'
                : 'text-gray-600 hover:bg-white/50'
            }`}
          >
            <Sparkles className="w-5 h-5" />
            Generate Contract
          </button>
        </div>

        {/* Analyze Tab */}
        {activeTab === 'analyze' && (
          <div className="space-y-6">
            {/* Upload Section */}
            <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Upload Contract for Analysis</h2>
              
              <label className="block">
                <div className="border-2 border-dashed border-gray-300 rounded-xl p-12 text-center hover:border-indigo-400 hover:bg-indigo-50/50 transition-all cursor-pointer">
                  <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-700 font-medium mb-2">
                    {uploadedFile ? uploadedFile.name : 'Drop your contract here or click to upload'}
                  </p>
                  <p className="text-sm text-gray-500">Supports PDF, DOCX, and scanned images</p>
                  <input
                    type="file"
                    className="hidden"
                    accept=".pdf,.doc,.docx,image/*"
                    onChange={handleFileUpload}
                  />
                </div>
              </label>
            </div>

            {/* Analysis Results */}
            {analysis && (
              <div className="space-y-6 animate-fadeIn">
                {/* Risk Score Card */}
                <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
                  <div className="flex items-start justify-between mb-6">
                    <div>
                      <h3 className="text-xl font-bold text-gray-900 mb-2">Risk Assessment</h3>
                      <p className="text-gray-600">{analysis.fileName}</p>
                    </div>
                    <div className={`${getRiskBg(analysis.riskScore)} px-6 py-4 rounded-xl`}>
                      <div className={`text-3xl font-bold ${getRiskColor(analysis.riskScore)}`}>
                        {analysis.riskScore}/10
                      </div>
                      <div className="text-sm text-gray-600 mt-1">Risk Score</div>
                    </div>
                  </div>

                  <div className="bg-gray-50 rounded-xl p-6 mb-6">
                    <h4 className="font-semibold text-gray-900 mb-3">AI Summary</h4>
                    <p className="text-gray-700 leading-relaxed">{analysis.summary}</p>
                  </div>

                  {/* Compliance Checks */}
                  <div className="grid grid-cols-4 gap-4">
                    {analysis.complianceChecks.map((check, idx) => (
                      <div key={idx} className="bg-gray-50 rounded-lg p-4 text-center">
                        {check.status === 'pass' ? (
                          <CheckCircle className="w-6 h-6 text-green-600 mx-auto mb-2" />
                        ) : (
                          <AlertTriangle className="w-6 h-6 text-yellow-600 mx-auto mb-2" />
                        )}
                        <div className="text-sm font-medium text-gray-900">{check.item}</div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Key Terms */}
                <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
                  <h3 className="text-xl font-bold text-gray-900 mb-6">Key Terms Extracted</h3>
                  <div className="space-y-4">
                    {analysis.keyTerms.map((term, idx) => (
                      <div key={idx} className="flex items-center justify-between p-4 bg-gray-50 rounded-xl">
                        <div className="flex-1">
                          <div className="font-semibold text-gray-900">{term.term}</div>
                          <div className="text-gray-600 mt-1">{term.value}</div>
                        </div>
                        <span className={`px-3 py-1 rounded-full text-xs font-medium ${getSeverityColor(term.risk)}`}>
                          {term.risk.toUpperCase()}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Red Flags */}
                <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
                  <div className="flex items-center gap-3 mb-6">
                    <Shield className="w-6 h-6 text-red-600" />
                    <h3 className="text-xl font-bold text-gray-900">Red Flags Detected</h3>
                  </div>
                  <div className="space-y-4">
                    {analysis.redFlags.map((flag, idx) => (
                      <div key={idx} className={`border-2 rounded-xl p-6 ${getSeverityColor(flag.severity)}`}>
                        <div className="flex items-start gap-3 mb-3">
                          <AlertTriangle className="w-5 h-5 mt-1 flex-shrink-0" />
                          <div className="flex-1">
                            <div className="font-bold text-lg mb-2">{flag.issue}</div>
                            <p className="text-sm mb-3">{flag.explanation}</p>
                            <div className="bg-white/50 rounded-lg p-3">
                              <div className="text-xs font-semibold mb-1">💡 RECOMMENDATION:</div>
                              <div className="text-sm">{flag.suggestion}</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex gap-4">
                  <button 
                    onClick={downloadAnalysisReport}
                    className="flex-1 flex items-center justify-center gap-2 px-6 py-4 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all"
                  >
                    <Download className="w-5 h-5" />
                    Download Full Report (TXT)
                  </button>
                  <button className="px-6 py-4 bg-white border-2 border-gray-200 text-gray-700 rounded-xl font-semibold hover:border-indigo-600 hover:text-indigo-600 transition-all">
                    Compare with Another Contract
                  </button>
                </div>
              </div>
            )}
          </div>
        )}

        {/* Generate Tab */}
        {activeTab === 'generate' && (
          <div className="space-y-6">
            <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Generate Contract with AI</h2>

              <div className="space-y-6">
                {/* Contract Type Selection */}
                <div>
                  <label className="block text-sm font-semibold text-gray-900 mb-3">
                    Select Contract Type
                  </label>
                  <div className="grid grid-cols-3 gap-4">
                    {[
                      { id: 'nda', name: 'Non-Disclosure Agreement', icon: '🔒' },
                      { id: 'service', name: 'Service Agreement', icon: '🤝' },
                      { id: 'employment', name: 'Employment Contract', icon: '💼' }
                    ].map((type) => (
                      <button
                        key={type.id}
                        onClick={() => setContractType(type.id)}
                        className={`p-6 rounded-xl border-2 transition-all text-left ${
                          contractType === type.id
                            ? 'border-indigo-600 bg-indigo-50'
                            : 'border-gray-200 hover:border-indigo-300'
                        }`}
                      >
                        <div className="text-3xl mb-3">{type.icon}</div>
                        <div className="font-semibold text-gray-900">{type.name}</div>
                      </button>
                    ))}
                  </div>
                </div>

                {/* Natural Language Prompt */}
                <div>
                  <label className="block text-sm font-semibold text-gray-900 mb-3">
                    Describe Your Needs (Optional)
                  </label>
                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    placeholder="e.g., Create an NDA for a graphic design freelancer working on a mobile app project..."
                    className="w-full px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-indigo-600 focus:outline-none resize-none"
                    rows="4"
                  />
                </div>

                <button
                  onClick={handleGenerateContract}
                  disabled={generating}
                  className="w-full flex items-center justify-center gap-3 px-6 py-4 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all disabled:opacity-50"
                >
                  {generating ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent" />
                      Generating Contract...
                    </>
                  ) : (
                    <>
                      <Sparkles className="w-5 h-5" />
                      Generate Contract
                    </>
                  )}
                </button>
              </div>
            </div>

            {/* Generated Contract */}
            {generatedContract && (
              <div className="bg-white rounded-2xl shadow-sm border border-gray-200 p-8 animate-fadeIn">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-xl font-bold text-gray-900">{generatedContract.title}</h3>
                  <div className="flex gap-3">
                    <button className="flex items-center gap-2 px-4 py-2 bg-white border-2 border-gray-200 text-gray-700 rounded-lg font-medium hover:border-indigo-600 transition-all">
                      <Download className="w-4 h-4" />
                      Export DOCX
                    </button>
                    <button className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg font-medium hover:shadow-lg transition-all">
                      <Download className="w-4 h-4" />
                      Export PDF
                    </button>
                  </div>
                </div>

                <div className="bg-gray-50 rounded-xl p-8 font-mono text-sm whitespace-pre-wrap leading-relaxed text-gray-800 max-h-96 overflow-y-auto">
                  {generatedContract.content}
                </div>

                <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-xl">
                  <div className="flex gap-3">
                    <AlertTriangle className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" />
                    <div className="text-sm text-blue-900">
                      <strong>Legal Disclaimer:</strong> This AI-generated contract is a template and starting point. 
                      Always have contracts reviewed by a qualified attorney before signing.
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default ContractIQ;
